{{- $url := urls.Parse $.Site.BaseURL -}}
{{- $root := default "/usr/share/nginx/html" $.Site.Params.nginx.root -}}
{{- $acmeroot := default $root $.Site.Params.nginx.acme -}}
# Map expiration information
# Leverages browser caching to make the site load faster by using
# cached versions of everything but the page itself.
map $sent_http_content_type $expires {
    default                off;   # Do not add caching control headers
    text/html              epoch; # Never cache
    text/css               max;
    font/woff              max;
    font/woff2             max;
    application/json       max;
    application/javascript max;
    ~image/                max;   # Match all image types
}
{{ if $.Site.Params.nginx.https -}}
# Redirect insecure connections to HTTPS
server {
    listen         80;
    server_name    {{ $url.Host }};

    # Serve ACME validation files over HTTP
    location /.well-known/acme-challenge {
        root {{ $acmeroot }};
        try_files $uri $uri/ =404;
    }

    return         301 https://$server_name$request_uri;
}
{{ if $.Site.Params.http2 }}
{{- range slice "serif" "sans-serif" "slab-serif" -}}
    {{- $.Scratch.Set . true -}}
{{- end -}}
map $http_cookie $response {
    "~*has-cache=yes" "";
    default "</styles.css>; as=style; rel=preload
    {{- range slice "css/foundation.css" "css/reset.css" "css/page.css" "css/fonts.css" -}}
        , <{{ partial "styles" (dict "Asset" . "Root" $ "URLOnly" true "RelType" "root-relative") | strings.TrimPrefix $url.Path }}>; as=style; rel=preload
    {{- end -}}
    , <{{ partial "script" (dict "Asset" "js/loadCSS.js" "Root" $ "URLOnly" true "RelType" "root-relative") | strings.TrimPrefix $url.Path }}>; as=script; rel=preload
    {{- range slice ($.Site.Params.fonts.header_style | default "sans-serif") ($.Site.Params.fonts.body_style | default "sans-serif") -}}
        {{- if ($.Scratch.Get .) -}}
            {{- if eq . "serif" -}}
                , </css/fonts/alegreya/Alegreya-Regular.woff2>; as=font; rel=preload
                {{- $.Scratch.Set . false -}}
            {{- else if eq . "sans-serif" -}}
                , </css/fonts/clear-sans/ClearSans-Regular.woff>; as=font; rel=preload
            {{- else if eq . "slab-serif" -}}
                , </css/fonts/zilla-slab/ZillaSlab-Regular.woff2; as=font; rel=preload
            {{- end -}}
        {{- end -}}
    {{- end }}
    {{- with $.Site.Params.thumbnail -}}
        , <{{ cond (hasPrefix . "/") . (add "/" .) }}>; as=image; rel=preload
    {{- end -}}";
}
{{ end }}
{{ end }}
server {
    listen       {{ if $.Site.Params.nginx.https }}443 ssl{{ else }}80{{ end }}{{ if $.Site.Params.http2 }} http2{{ end }};
    server_name  {{ $url.Host }};

    expires $expires;

    gzip on;
    gzip_types text/plain text/css application/javascript application/json;

    {{ if $.Site.Params.nginx.https -}}
    {{- $cert := add $url.Host "/fullchain.pem" | add "/etc/letsencrypt/live/" -}}
    {{- $key := add $url.Host "/privkey.pem" | add "/etc/letsencrypt/live/" -}}
    {{- if or $.Site.Params.nginx.ssl_cert $.Site.Params.nginx.ssl_key -}}
        {{- with $.Site.Params.nginx.ssl_cert -}}
            {{- $cert = . -}}
        {{- else -}}
            {{- errorf "params.nginx.ssl_cert must be set with params.nginx.ssl_key" -}}
        {{- end -}}

        {{- with $.Site.Params.nginx.ssl_key -}}
            {{- $key = . -}}
        {{- else -}}
            {{- errorf "params.nginx.ssl_key must be set with params.nginx.ssl_cert" -}}
        {{- end -}}
    {{- end -}}
    ssl_certificate      {{ $cert }};
    ssl_certificate_key  {{ $key }};

    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_prefer_server_ciphers  on;
    {{- end }}

    {{ if $.Site.Params.nginx.hsts -}}
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload" always;
    {{- end }}

    # Change root to the root directory of your Hugo site
    root {{ $root }};
    index index.html index.htm;

    add_header Vary "Accept-Encoding";
    {{- if $.Site.Params.http2 }}
    http2_push_preload on;
    add_header Set-Cookie "has-cache=yes; SameSite=Strict; {{ if $.Site.Params.nginx.https }}Secure{{ end }}; HttpOnly; Domain {{ $url.Host }}; Path={{ $url.Path | default "/" }}";
    {{- end }}

    {{ if ne $acmeroot $root }}
    location /.well-known/acme-challenge {
        root {{ $acmeroot }};
        try_files $uri $uri/ =404;
    }
    {{ end }}
    
    location / {
        try_files $uri $uri/ =404;
    }

    # Google PageSpeed complains about woffs not being cached without this
    location ~ \.(woff|woff2) {
         expires max;
    }

    error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html

    error_page   500 502 503 504  /50x.html;

    # Don't expose server info
    server_tokens off;

    # Don't allow iframing except on same site/server
    add_header X-Frame-Options "SAMEORIGIN" always;

    # Browsers display things is mime type specified, not sniffed
    # Prevents trying to load an exacutable as "text/html"
    add_header X-Content-Type-Options "nosniff" always;

    # Enable XSS Protection in browsers not supporting CSP
    add_header X-XSS-Protection "1; mode=block";

    add_header Referrer-Policy "strict-origin-when-cross-origin";

    add_header Feature-Policy "vibrate 'none'; geolocation 'none'; midi 'none'; notifications *; push *; sync-xhr 'none'; microphone 'none'; camera 'none'; magnetometer 'none'; gyroscope 'none'; speaker *; fullscreen *; payment 'none'";

    {{ if not $.Site.Params.disable_csp }}
    # Content Security Policy
    add_header Content-Security-Policy "{{ partial "get_csp.txt" $ }}";
    {{ end }}
}
